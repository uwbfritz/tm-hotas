// -----------------------------------------------------------------------------
//  9 Positions Hat Module for Thrustmaster TARGET
// -----------------------------------------------------------------------------
//  9 Positions Hat Module header
//  Version:  1.0
//  Author:   Sedenion
// -----------------------------------------------------------------------------
//  Desc:
//  Functions and definitions for the 9 Positions Hat Module. This module allow 
//  to handle any Hat with 9 positions: 4 standard, 4 corners and 1 abstract 
//  middle position. 
//  
//  Usage: 
//  The module can handle only one hat at a time. You have to choose the
//  one you want to use for 9 positions Hat. If no Hat is defined, the module is 
//  disabled.
//  The abstract middle position is pressed while the Hat is out of its middle 
//  position, this allow to assign modifier keys, such as SHIFT or CTRL.
//  The module does not allow separated Press and Release mapping.
//
//  I) Installation
//
//    - Include this file using the "include" keywork in your main
//      tmc profile file.
//
//      example:
//              include "h9p.tmh"
//
//    - Add a call to the H9pMapping() function within the EventHandle() 
//      function with proper parameters.
//     
//      example: 
//              int EventHandle(int type, alias o, int x)
//              {
//                DefaultMapping(&o, x);
//                H9pMapping(&o, x);
//              }
//        
//  II) Define HAT and Mapping
//
//    - Within the main() function, you must define the HAT you want 
//      to use with corners using the SetH9p() function.
//
//      example: 
//              SetH9p(&Joystick, H2);
//
//    - Then map all desired positions with key, macro or function as any other
//      button using any MapH9p*() function.
//
//      example: 
//              MapH9p(H9U,   DXHATUP);
//              MapH9p(H9UR,  DXHATUPRIGHT);
//              MapH9p(H9R,   DXHATRIGHT);
//              MapH9p(H9DR,  DXHATDOWNRIGHT);
//              MapH9p(H9D,   DXHATDOWN);
//              MapH9p(H9DL,  DXHATDOWNLEFT);
//              MapH9p(H9L,   DXHATLEFT);
//              MapH9p(H9UL,  DXHATUPLEFT);
//              MapH9p(H9ME,  R_SHIFT); // pressed when exit middle position
//
//     - Available mapping functions are MapH9pIOUMD(), MapH9pUMD(), 
//       MapH9pIO() and MapH9p().
//      
// -----------------------------------------------------------------------------

// ----------------------------- Global Defines --------------------------------

// HAT Identifiers
define H1       11
define H2       12
define H3       13
define H4       14
//define CS     22 // CS is already defined as IN_POSITION_HAT
define MS       21

// Positions identifiers/index
define H9U			  0    // 6 layer index for each position
define H9UR		    6
define H9R			  12
define H9DR		    18
define H9D			  24
define H9DL		    30
define H9L			  36
define H9UL		    42
define H9ME		    48

// ---------------------------- Global Variables -------------------------------

byte  H9pEnabled  = 0;                    // Module enable flag
int   H9pDev;                             // Input Hat device ptr
int   H9pBtn[4];                          // Input Hat buttons index list (U, R, D, L)
int   H9pKey[54];                         // Mapping list (9 pos * 6 layers)

// ---------------------------- Mapping Functions ------------------------------

// Define HAT for H9p.
//
// - param[in] dev Input device (&Joystick or &Throttle).
// - param[in] hat Input HAT identifier (H1, H2, H3, H4, MS or CS).
//
// - return 0 if operation succeed, 1 if dev and hat are not supported or valid.
//
// Defines the HAT who must be mapped with corners positions This initializes 
// the H9p module to handle the specified HAT.
//
int SetH9p(alias dev, int hat)
{
  H9pDev = &dev;
  
  int u = 0; // first hat button id
  alias n;
  
  // check which hat and map module
  if(&dev == &Joystick) {
    if(hat == H2) { u = H2U; &n = "Joystick H2"; }
    if(hat == H3) { u = H3U; &n = "Joystick H3"; }
    if(hat == H4) { u = H4U; &n = "Joystick H4"; }
    if(hat == H1) { u = H1U; &n = "Joystick H1"; }
  }
  
  if(&dev == &Throttle) {
    if(hat == MS) { u = MSU; &n = "Throttle MS"; }
    if(hat == CS) { u = CSU; &n = "Throttle CS"; }
  }
  
  if(u == 0) // bad parameters
    return 1; 
  
  int i = 0;
  while(i < 4) {
  
    H9pBtn[i] = u + i;
    MapKey(&dev, H9pBtn[i],  0); // disable the default DX button
    
    i = i + 1;
  }
  
  H9pEnabled = 1;
  
  printf("Module enabled : 9 Positions Hat on %s\xa", &n);
  
  return 0;
}

// MapKeyIOUMD for H9p.
//
// - param[in] pos HAT position (H9U,H9D,H9L,H9R,H9UR,H9UL,H9DL,H9DR or H9ME).
// - param[in] keyIU Keystroke/command for IU layer.
// - param[in] keyOU Keystroke/command for OU layer.
// - param[in] keyIM Keystroke/command for IM layer.
// - param[in] keyOM Keystroke/command for OM layer.
// - param[in] keyID Keystroke/command for ID layer.
// - param[in] keyOD Keystroke/command for OD layer.
//
// - return 0 if operation succeed, 1 if pos is not valid.
//
// Associate keystrokes with the specified HAT position at given layers.
//
int MapH9pIOUMD(int pos, int keyIU=0, int keyOU=0, int keyIM=0, int keyOM=0, int keyID=0, int keyOD=0)
{
  if(pos >= 0 & pos < 49) { // is pos valid value ?
    
    H9pKey[pos] = keyOU;
    H9pKey[pos+1] = keyIU;
    H9pKey[pos+2] = keyOM;
    H9pKey[pos+3] = keyIM;
    H9pKey[pos+4] = keyOD;
    H9pKey[pos+5] = keyID;
    
    return 0;
  }
  
  return 1; // error
}

// MapKeyUMD for H9p.
//
// - param[in] pos HAT position, can be H9U, H9D, H9L, H9R, H9UR, H9UL, H9DL, H9DR or H9ME
// - param[in] keyU Keystroke/command for U layer.
// - param[in] keyM Keystroke/command for M layer.
// - param[in] keyD Keystroke/command for D layer.
//
// - return 0 if operation succeed, 1 if pos is not valid.
//
// Associate keystrokes with the specified HAT position at given layers.
//
int MapH9pUMD(int pos, int keyU=0, int keyM=0, int keyD=0)
{
  return MapH9pIOUMD(pos, keyU, keyU, keyM, keyM, keyD, keyD);
}

// MapKeyIO for H9p.
//
// - param[in] pos HAT position, can be H9U, H9D, H9L, H9R, H9UR, H9UL, H9DL, H9DR or H9ME
// - param[in] keyI Keystroke/command for I layer.
// - param[in] keyO Keystroke/command for O layer.
//
// - return 0 if operation succeed, 1 if pos is not valid.
//
// Associate keystrokes with the specified HAT position at given layers.
//
int MapH9pIO(int pos, int keyI=0, int keyO=0)
{
  return MapH9pIOUMD(pos, keyI, keyO, keyI, keyO, keyI, keyO);
}

// MapKey for H9p.
//
// - param[in] pos HAT position, can be H9U, H9D, H9L, H9R, H9UR, H9UL, H9DL, H9DR or H9ME
// - param[in] key Keystroke/command.
//
// - return 0 if operation succeed, 1 if pos is not valid.
//
// Associate keystrokes with the specified HAT position.
//
int MapH9p(int pos, int key)
{
  return MapH9pIOUMD(pos, key, key, key, key, key, key);
}


// ---------------------------- Callback Function ------------------------------


// Event Callback for H9p.
//
// - param[in] o Event device.
// - param[in] x Event button.
//
// - return always 0.
//
// Performs event handling to generate keystrokes according device states. This 
// function is the  event callback routine who must be called within the 
// EventHandle() function.
//
int H9pMapping(alias o, int x) {
  
  int i;
  int l;
  
  if(H9pEnabled) {
    
    if(&o == H9pDev) { // event on device
      
      if(x == H9pBtn[0] | x == H9pBtn[1] | x == H9pBtn[2] | x == H9pBtn[3]) { // event on button(s)
        
        // get current IOUMD layer index
        l = ((2 - (layer_sw[5]*2)) + (layer_sw[8]*2)) + layer_sw[2];
        
        // first, check if any corner (Up+Right, Down+Left, etc.) is pressed
        
        if(o[H9pBtn[0]] & o[H9pBtn[3]]) { // HU + HL
          // Release U & L in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9U+i]); ActKey(H9pKey[H9L+i]); i=i+1;}
          ActKey(KEYON+H9pKey[H9ME+l]+H9pKey[H9UL+l]); // Press ME+UL
          return 0; // return now
        } else {
          // Release UL in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9UL+i]); i=i+1;}
        }
        
        if(o[H9pBtn[0]] & o[H9pBtn[1]]) { // HU + HR
          // Release U & R in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9U+i]); ActKey(H9pKey[H9R+i]); i=i+1;}
          ActKey(KEYON+H9pKey[H9ME+l]+H9pKey[H9UR+l]); // Press ME+UR
          return 0; // return now
        } else {
          // Release UR in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9UR+i]); i=i+1;}
        }
        
        if(o[H9pBtn[2]] & o[H9pBtn[3]]) { // HD + HL
          // Release D & L in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9D+i]); ActKey(H9pKey[H9L+i]); i=i+1;}
          ActKey(KEYON+H9pKey[H9ME+l]+H9pKey[H9DL+l]); // Press ME+DL
          return 0; // return now
        } else {
          // Release DL in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9DL+i]); i=i+1;}
        }
        
        if(o[H9pBtn[2]] & o[H9pBtn[1]]) { // HD + HR
          // Release D & R in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9D+i]); ActKey(H9pKey[H9R+i]); i=i+1;}
          ActKey(KEYON+H9pKey[H9ME+l]+H9pKey[H9DR+l]); // Press ME+DR
          return 0; // return now
        } else {
          // Release DR in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9DR+i]); i=i+1;}
        }
        
        // no corner pressed, so we check if any standard Up, Down, 
        // Left or Right is pressed.
        
        if(o[H9pBtn[0]]) { // HU
          ActKey(KEYON+H9pKey[H9ME+l]+H9pKey[H9U+l]); // Press ME+U
          return 0; // return now
        } else {
          // Release U in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9U+i]); i=i+1;}
        }
        
        if(o[H9pBtn[1]]) { // HR
          ActKey(KEYON+H9pKey[H9ME+l]+H9pKey[H9R+l]); // Press ME+R
          return 0; // return now
        } else {
          // Release R in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9R+i]); i=i+1;}
        }
        
        if(o[H9pBtn[2]]) { // HD
          ActKey(KEYON+H9pKey[H9ME+l]+H9pKey[H9D+l]); // Press ME+D
          return 0; // return now
        } else {
          // Release D in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9D+i]); i=i+1;}
        }
        
        if(o[H9pBtn[3]]) { // HL
          ActKey(KEYON+H9pKey[H9ME+l]+H9pKey[H9L+l]); // Press ME+L
          return 0; // return now
        } else {
          // Release L in all layers
          i=0; while(i<6){ ActKey(H9pKey[H9L+i]); i=i+1;}
        }
        
        // all Hat buttons are released, we are in the middle positiont
        // Release ME in all layers
        i=0; while(i<6){ ActKey(H9pKey[H9ME+i]); i=i+1;}
        return 0;
      } 
    }
    
  } // if(H9pEnabled)
  
  return 0;
}

